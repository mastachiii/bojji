// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("TEST_DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  fullName       String
  username       String         @unique
  email          String         @unique
  password       String
  profilePicture String?
  bio            String?
  followers      User[]         @relation("followers")
  following      User[]         @relation("following")
  posts          Post[]
  comments       Comment[]
  commentReplies Reply[]
  stories        Story[]
  conversations  Conversation[]
  messages       Message[]
  likedPosts     Post[]         @relation("liked post")
  likedComments  Comment[]      @relation("liked comment")
  likedReplies   Reply[]        @relation("liked replies")
  likedStories   Story[]        @relation("liked stories")

  symmetricFollowers User[]         @relation("followers")
  symmetricFollowing User[]         @relation("following")
  Notification       Notification[]
}

model Post {
  id           String         @id @default(uuid())
  body         String
  images       String[]
  comments     Comment[]
  likedBy      User[]         @relation("liked post")
  edited       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  author       User           @relation(fields: [authorId], references: [id])
  authorId     Int
  Notification Notification[]
}

model Comment {
  id        String   @id @default(uuid())
  body      String
  replies   Reply[]
  likedBy   User[]   @relation("liked comment")
  createdAt DateTime @default(now())
  author    User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
}

model Reply {
  id        String   @id @default(uuid())
  body      String
  likedBy   User[]   @relation("liked replies")
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Story {
  id        String   @id @default(uuid())
  image     String
  likedBy   User[]   @relation("liked stories")
  expiresAt DateTime
  createdAt DateTime @default(now())
  author    User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Conversation {
  id       String    @id @default(uuid())
  messages Message[]
  users    User[]
}

model Message {
  id             String        @id @default(uuid())
  message        String
  isImage        Boolean
  dateSent       DateTime      @default(now())
  sender         User          @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
}
